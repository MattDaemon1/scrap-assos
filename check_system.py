#!/usr/bin/env python3
"""
Script de v√©rification rapide du syst√®me
Contr√¥le que tous les composants sont fonctionnels
"""

import sys
import os
from pathlib import Path

def check_files():
    """V√©rification des fichiers critiques"""
    print("üîç V√©rification des fichiers...")
    
    critical_files = [
        'main.py',
        'config/settings.py',
        'scrapers/journal_officiel_scraper.py',
        'analyzers/website_analyzer.py',
        'email_manager/campaign_manager.py',
        'utils/data_manager.py',
        'utils/google_sheets_manager.py',
        'requirements.txt'
    ]
    
    missing = []
    for file in critical_files:
        if not Path(file).exists():
            missing.append(file)
    
    if missing:
        print(f"‚ùå Fichiers manquants: {missing}")
        return False
    
    print("‚úÖ Tous les fichiers critiques pr√©sents")
    return True

def check_imports():
    """V√©rification des imports Python"""
    print("\nüêç V√©rification des imports...")
    
    try:
        import config.settings
        print("‚úÖ config.settings")
        
        from scrapers.journal_officiel_scraper import JournalOfficielScraper
        print("‚úÖ scrapers.journal_officiel_scraper")
        
        from analyzers.website_analyzer import WebsiteAnalyzer
        print("‚úÖ analyzers.website_analyzer")
        
        from email_manager.campaign_manager import CampaignManager
        print("‚úÖ email_manager.campaign_manager")
        
        from utils.data_manager import DataManager
        print("‚úÖ utils.data_manager")
        
        from utils.google_sheets_manager import GoogleSheetsManager
        print("‚úÖ utils.google_sheets_manager")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def check_config():
    """V√©rification de la configuration"""
    print("\n‚öôÔ∏è V√©rification de la configuration...")
    
    try:
        from config.settings import (
            TARGET_DEPARTMENTS,
            TARGET_SECTORS,
            MIN_BUDGET,
            MAX_BUDGET,
            PRIORITY_REGIONS,
            EMAIL_SENDER_NAME,
            EMAIL_SENDER_EMAIL
        )
        
        print(f"‚úÖ D√©partements cibl√©s: {len(TARGET_DEPARTMENTS)}")
        print(f"‚úÖ Secteurs cibl√©s: {len(TARGET_SECTORS)}")
        print(f"‚úÖ Budget: {MIN_BUDGET:,}‚Ç¨ - {MAX_BUDGET:,}‚Ç¨")
        print(f"‚úÖ Email configur√©: {EMAIL_SENDER_NAME} <{EMAIL_SENDER_EMAIL}>")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")
        return False

def check_google_sheets():
    """V√©rification de Google Sheets"""
    print("\nüìä V√©rification Google Sheets...")
    
    if Path("google_credentials.json").exists():
        print("‚úÖ Fichier credentials pr√©sent")
        try:
            from utils.google_sheets_manager import GoogleSheetsManager
            # Test de connection sans erreur
            print("‚úÖ Google Sheets Manager import√©")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur Google Sheets: {e}")
            return False
    else:
        print("‚ö†Ô∏è Fichier google_credentials.json manquant")
        print("   Ex√©cutez: python setup_google_sheets.py")
        return False

def check_templates():
    """V√©rification des templates"""
    print("\nüìß V√©rification des templates...")
    
    templates = list(Path("templates").glob("*.txt"))
    if len(templates) >= 3:
        print(f"‚úÖ {len(templates)} templates trouv√©s")
        return True
    else:
        print(f"‚ö†Ô∏è Seulement {len(templates)} templates trouv√©s")
        return False

def main():
    """Fonction principale"""
    print("üöÄ V√âRIFICATION DU SYST√àME LEAD GENERATOR")
    print("=" * 50)
    
    checks = [
        check_files(),
        check_imports(),
        check_config(),
        check_google_sheets(),
        check_templates()
    ]
    
    success_count = sum(checks)
    total_count = len(checks)
    
    print("\n" + "=" * 50)
    print(f"üìä R√âSULTAT: {success_count}/{total_count} v√©rifications r√©ussies")
    
    if success_count == total_count:
        print("üéâ Syst√®me pr√™t ! Ex√©cutez: python main.py")
    elif success_count >= 3:
        print("‚ö†Ô∏è Syst√®me partiellement pr√™t")
        print("   Corrigez les erreurs puis relancez le check")
    else:
        print("‚ùå Syst√®me non fonctionnel")
        print("   Installez les d√©pendances: pip install -r requirements.txt")
    
    return success_count == total_count

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
