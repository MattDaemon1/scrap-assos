#!/usr/bin/env python3
"""
Script de configuration pour Google Sheets
"""

import os
import json
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.google_sheets_manager import GoogleSheetsManager

def setup_google_sheets():
    """Configuration interactive de Google Sheets"""
    print("üîß CONFIGURATION GOOGLE SHEETS")
    print("=" * 50)
    
    gs_manager = GoogleSheetsManager()
    
    # V√©rifier si les credentials existent
    credentials_file = "config/google_credentials.json"
    
    if not os.path.exists(credentials_file):
        print("‚ùå Fichier credentials non trouv√©")
        print("\nüìù √âTAPES DE CONFIGURATION:")
        print("1. Allez sur https://console.cloud.google.com/")
        print("2. Cr√©ez un nouveau projet ou s√©lectionnez un existant")
        print("3. Activez l'API Google Sheets et Google Drive:")
        print("   - Recherchez 'Google Sheets API' et activez-la")
        print("   - Recherchez 'Google Drive API' et activez-la")
        print("4. Cr√©ez un compte de service:")
        print("   - IAM & Admin > Comptes de service > Cr√©er un compte de service")
        print("   - Donnez un nom (ex: 'leads-generator')")
        print("   - R√¥le: √âditeur de projet")
        print("5. Cr√©ez une cl√©:")
        print("   - Cliquez sur le compte cr√©√© > Cl√©s > Ajouter une cl√© > JSON")
        print("   - T√©l√©chargez le fichier JSON")
        print("6. Renommez le fichier en 'google_credentials.json'")
        print("7. Placez-le dans le dossier 'config/'")
        
        # G√©n√©rer le template
        gs_manager.generate_credentials_template()
        print(f"\n‚úÖ Template g√©n√©r√© dans {credentials_file.replace('.json', '_template.json')}")
        return False
    
    # Tester la connexion
    print("üîÑ Test de connexion...")
    if gs_manager.setup_credentials():
        print("‚úÖ Connexion r√©ussie!")
        
        # Proposer de cr√©er une feuille
        create_sheet = input("\nVoulez-vous cr√©er une nouvelle feuille de leads? (y/N): ")
        if create_sheet.lower() in ['y', 'yes', 'oui']:
            sheet_name = input("Nom de la feuille (d√©faut: 'Leads Associations'): ") or "Leads Associations"
            
            print(f"üîÑ Cr√©ation de la feuille '{sheet_name}'...")
            sheet_url = gs_manager.create_leads_sheet(sheet_name)
            
            if sheet_url:
                print(f"‚úÖ Feuille cr√©√©e avec succ√®s!")
                print(f"üîó URL: {sheet_url}")
                
                # Sauvegarder l'URL dans .env
                save_url = input("\nVoulez-vous sauvegarder cette URL dans .env? (Y/n): ")
                if save_url.lower() not in ['n', 'no', 'non']:
                    update_env_file(sheet_url)
                
                return True
        else:
            # Demander l'URL d'une feuille existante
            existing_url = input("\nURL de votre feuille Google Sheets existante (optionnel): ")
            if existing_url:
                if gs_manager.connect_to_sheet(existing_url):
                    print("‚úÖ Connexion √† la feuille existante r√©ussie!")
                    update_env_file(existing_url)
                    return True
                else:
                    print("‚ùå Impossible de se connecter √† cette feuille")
            
            return True
    else:
        print("‚ùå √âchec de la connexion")
        print("V√©rifiez que:")
        print("- Le fichier google_credentials.json est pr√©sent")
        print("- Les APIs Google Sheets et Drive sont activ√©es")
        print("- Le compte de service a les bonnes permissions")
        return False

def update_env_file(sheet_url):
    """Mettre √† jour le fichier .env avec l'URL de la feuille"""
    env_file = ".env"
    
    # Lire le fichier .env existant ou cr√©er
    lines = []
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    
    # Mettre √† jour ou ajouter GOOGLE_SHEETS_URL
    updated = False
    for i, line in enumerate(lines):
        if line.startswith('GOOGLE_SHEETS_URL='):
            lines[i] = f'GOOGLE_SHEETS_URL={sheet_url}\n'
            updated = True
            break
    
    if not updated:
        lines.append(f'GOOGLE_SHEETS_URL={sheet_url}\n')
    
    # Sauvegarder
    with open(env_file, 'w', encoding='utf-8') as f:
        f.writelines(lines)
    
    print(f"‚úÖ URL sauvegard√©e dans {env_file}")

def test_google_sheets():
    """Tester l'int√©gration Google Sheets"""
    print("üß™ TEST GOOGLE SHEETS")
    print("=" * 30)
    
    gs_manager = GoogleSheetsManager()
    
    if not gs_manager.setup_credentials():
        print("‚ùå √âchec du test - Credentials non configur√©s")
        return False
    
    # Test avec des donn√©es factices
    test_data = [
        {
            'Nom': 'Association Test',
            'Email': 'test@example.com',
            'D√©partement': '18',
            'Secteur_Detecte': 'education',
            'needs_website': True,
            'website_quality': 'poor'
        }
    ]
    
    # Cr√©er une feuille de test
    sheet_url = gs_manager.create_leads_sheet("Test Configuration")
    if sheet_url:
        print(f"‚úÖ Feuille de test cr√©√©e: {sheet_url}")
        
        # Ajouter des donn√©es de test
        if gs_manager.add_leads(test_data):
            print("‚úÖ Donn√©es de test ajout√©es")
            
            # Test de mise √† jour
            if gs_manager.update_contact_status('test@example.com', 'Contact√©', 'Template 1', notes='Test de configuration'):
                print("‚úÖ Mise √† jour de statut test√©e")
                
                # Statistiques
                stats = gs_manager.export_statistics()
                if stats:
                    print("‚úÖ Export de statistiques test√©")
                    print(f"Total leads dans la feuille: {stats.get('Total leads', 0)}")
                    
                    print("\nüéâ Tous les tests pass√©s! Google Sheets est correctement configur√©.")
                    return True
    
    print("‚ùå √âchec des tests")
    return False

def main():
    """Point d'entr√©e principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Configuration Google Sheets")
    parser.add_argument('--test', action='store_true', help="Tester la configuration")
    
    args = parser.parse_args()
    
    if args.test:
        success = test_google_sheets()
    else:
        success = setup_google_sheets()
    
    if success:
        print("\n‚úÖ Configuration termin√©e avec succ√®s!")
        print("Vous pouvez maintenant utiliser Google Sheets avec le g√©n√©rateur de leads.")
    else:
        print("\n‚ùå Configuration incompl√®te.")
        print("Consultez la documentation pour plus d'aide.")

if __name__ == "__main__":
    main()
