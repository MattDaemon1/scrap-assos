#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RNA CAMPAIGN COMPLETE - Campagne compl√®te avec suivi
===================================================
Envoi + tracking + gestion des retours int√©gr√©e
"""

import pandas as pd
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import time
import sys
import os
from datetime import datetime
import configparser

# Importer le tracker
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from campaign_tracker import CampaignTracker

class RNACampaignComplete:
    """Campagne email RNA compl√®te avec suivi"""
    
    def __init__(self):
        self.tracker = CampaignTracker()
        self.smtp_config = self._load_smtp_config()
        self.email_template = self._load_email_template()
        self.contacts = self._load_contacts()
        
        # Importer contacts dans le tracker
        self.tracker.import_rna_contacts()
        
    def _load_smtp_config(self):
        """Charger configuration SMTP"""
        try:
            config = configparser.ConfigParser()
            config.read("config/sender_config.txt", encoding='utf-8')
            
            smtp_config = {
                'server': config.get('EMAIL_SMTP', 'smtp_server'),
                'port': config.getint('EMAIL_SMTP', 'smtp_port'),
                'email': config.get('SENDER_INFO', 'email'),
                'password': config.get('EMAIL_SMTP', 'email_password'),
                'use_ssl': config.getboolean('EMAIL_SMTP', 'use_ssl')
            }
            
            self.sender_info = {
                'prenom': config.get('SENDER_INFO', 'prenom'),
                'nom': config.get('SENDER_INFO', 'nom'),
                'telephone': config.get('SENDER_INFO', 'telephone'),
                'email': config.get('SENDER_INFO', 'email')
            }
            
            print(f"‚úÖ Configuration SMTP charg√©e")
            return smtp_config
            
        except Exception as e:
            print(f"‚ùå Erreur configuration SMTP: {e}")
            sys.exit(1)
    
    def _load_email_template(self):
        """Charger template email"""
        try:
            with open("templates/email_template_1.txt", 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Extraire objet et corps
            lines = content.split('\n')
            subject = "Opportunit√© de d√©veloppement"
            body_start = 0
            
            for i, line in enumerate(lines):
                if line.startswith('Objet:') or line.startswith('Objet :'):
                    subject = line.replace('Objet:', '').replace('Objet :', '').strip()
                    body_start = i + 1
                    break
            
            body_lines = lines[body_start:]
            while body_lines and not body_lines[0].strip():
                body_lines.pop(0)
            
            body = '\n'.join(body_lines)
            
            print(f"‚úÖ Template charg√©")
            return {'subject': subject, 'body': body}
            
        except Exception as e:
            print(f"‚ùå Erreur template: {e}")
            sys.exit(1)
    
    def _load_contacts(self):
        """Charger contacts RNA"""
        try:
            df = pd.read_csv("data/rna_emails_clean_20250713_1608.csv")
            contacts = df.to_dict('records')
            print(f"‚úÖ {len(contacts)} contacts charg√©s")
            return contacts
            
        except Exception as e:
            print(f"‚ùå Erreur contacts: {e}")
            sys.exit(1)
    
    def _personalize_email(self, contact):
        """Personnaliser email pour un contact"""
        try:
            # Donn√©es pour personnalisation
            data = {
                'nom_association': contact['nom_association'].replace("'", "").replace("√©", "e"),
                'prenom_contact': 'Responsable',  # Par d√©faut
                'secteur_detecte': contact['secteur'],
                'departement': f"d√©partement de l'Ain ({contact['ville']})",
                'telephone': self.sender_info['telephone'],
                'prenom': self.sender_info['prenom'],
                'nom': self.sender_info['nom'],
                'email': self.sender_info['email']
            }
            
            # Personnaliser template
            subject_clean = self.email_template['subject'].replace('{{', '{').replace('}}', '}')
            body_clean = self.email_template['body'].replace('{{', '{').replace('}}', '}')
            
            subject = subject_clean.format(**data)
            body = body_clean.format(**data)
            
            return subject, body
            
        except Exception as e:
            print(f"‚ùå Erreur personnalisation: {e}")
            return None, None
    
    def send_campaign_with_tracking(self, test_mode=True, max_emails=None, delay_seconds=3):
        """Envoyer campagne avec suivi int√©gr√©"""
        print(f"\nüöÄ CAMPAGNE RNA AVEC SUIVI")
        print(f"=" * 50)
        print(f"üìß Contacts: {len(self.contacts)}")
        print(f"üß™ Mode test: {'OUI' if test_mode else 'NON'}")
        print(f"‚è±Ô∏è  D√©lai entre envois: {delay_seconds}s")
        
        if max_emails:
            print(f"üìä Limite: {max_emails} emails")
        
        if test_mode:
            print(f"‚ö†Ô∏è  MODE TEST - Emails vers matt@mattkonnect.com")
        
        # Confirmation
        if not test_mode:
            confirm = input(f"\n‚ùì Confirmer envoi r√©el ? (oui/non): ")
            if confirm.lower() not in ['oui', 'o', 'yes', 'y']:
                print("‚ùå Campagne annul√©e")
                return
        
        # Connexion SMTP
        try:
            print(f"\nüîó Connexion SMTP...")
            if self.smtp_config['use_ssl']:
                server = smtplib.SMTP_SSL(self.smtp_config['server'], self.smtp_config['port'])
            else:
                server = smtplib.SMTP(self.smtp_config['server'], self.smtp_config['port'])
                server.starttls()
            
            server.login(self.smtp_config['email'], self.smtp_config['password'])
            print(f"‚úÖ Connexion √©tablie")
            
        except Exception as e:
            print(f"‚ùå Erreur connexion: {e}")
            return
        
        # Envoi avec tracking
        sent_count = 0
        error_count = 0
        contacts_to_send = self.contacts[:max_emails] if max_emails else self.contacts
        
        print(f"\nüì§ ENVOI EN COURS...")
        
        for i, contact in enumerate(contacts_to_send, 1):
            try:
                # Personnaliser
                subject, body = self._personalize_email(contact)
                if not subject or not body:
                    error_count += 1
                    continue
                
                # Cr√©er message
                msg = MIMEMultipart()
                msg['From'] = f"{self.sender_info['prenom']} {self.sender_info['nom']} <{self.smtp_config['email']}>"
                
                # Destination
                dest_email = "matt@mattkonnect.com" if test_mode else contact['email']
                msg['To'] = dest_email
                msg['Subject'] = subject
                
                msg.attach(MIMEText(body, 'plain', 'utf-8'))
                
                # Envoyer
                server.send_message(msg)
                
                # Enregistrer dans le tracker
                envoi_id = self.tracker.log_email_sent(contact['email'], subject, "email_template_1")
                
                sent_count += 1
                print(f"  ‚úÖ {i:2d}/{len(contacts_to_send)} - {contact['nom_association'][:35]}... ‚Üí {dest_email}")
                
                # D√©lai
                if i < len(contacts_to_send):
                    time.sleep(delay_seconds)
                
            except Exception as e:
                error_count += 1
                print(f"  ‚ùå {i:2d}/{len(contacts_to_send)} - Erreur: {e}")
        
        server.quit()
        
        # R√©sum√© avec dashboard
        print(f"\nüéâ CAMPAGNE TERMIN√âE")
        print(f"‚úÖ Emails envoy√©s: {sent_count}")
        print(f"‚ùå Erreurs: {error_count}")
        print(f"üìä Taux de succ√®s: {(sent_count/(sent_count+error_count)*100):.1f}%")
        
        # Afficher dashboard mis √† jour
        print(f"\n" + "="*50)
        self.tracker.get_dashboard()
        
        print(f"\nüí° PROCHAINES √âTAPES:")
        print(f"  1. üí¨ Surveiller les r√©ponses")
        print(f"  2. üìä Utiliser response_handler.py pour traiter les retours")
        print(f"  3. üìû Suivre les leads chauds")
        print(f"  4. üìà Analyser les performances")

def main():
    """Menu principal"""
    campaign = RNACampaignComplete()
    
    print(f"üéØ RNA CAMPAIGN COMPLETE")
    print(f"=" * 40)
    print(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print(f"üèõÔ∏è Source: RNA D√©partement 01")
    print(f"üìß {len(campaign.contacts)} contacts disponibles")
    
    print(f"\nüìã OPTIONS:")
    print(f"  1. üß™ Test (1 email)")
    print(f"  2. üß™ Test limit√© (3 emails)")
    print(f"  3. üöÄ Campagne compl√®te")
    print(f"  4. üìä Dashboard actuel")
    print(f"  5. üí¨ G√©rer les r√©ponses")
    print(f"  6. üö™ Quitter")
    
    choice = input(f"\n‚ùì Votre choix (1-6): ").strip()
    
    if choice == '1':
        campaign.send_campaign_with_tracking(test_mode=True, max_emails=1)
    elif choice == '2':
        campaign.send_campaign_with_tracking(test_mode=True, max_emails=3)
    elif choice == '3':
        campaign.send_campaign_with_tracking(test_mode=False)
    elif choice == '4':
        campaign.tracker.get_dashboard()
    elif choice == '5':
        print(f"\nüí° Lancez: python response_handler.py")
    elif choice == '6':
        print(f"üëã Au revoir!")
    else:
        print(f"‚ùå Choix invalide")

if __name__ == "__main__":
    main()
